// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PromiseCreated extends ethereum.Event {
  get params(): PromiseCreated__Params {
    return new PromiseCreated__Params(this);
  }
}

export class PromiseCreated__Params {
  _event: PromiseCreated;

  constructor(event: PromiseCreated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get creatorToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get creatorAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get joinerToken(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get joinerAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get expirationTimestamp(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class PromiseExecuted extends ethereum.Event {
  get params(): PromiseExecuted__Params {
    return new PromiseExecuted__Params(this);
  }
}

export class PromiseExecuted__Params {
  _event: PromiseExecuted;

  constructor(event: PromiseExecuted) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get creatorTokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get joinerTokenAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class PromiseJoined extends ethereum.Event {
  get params(): PromiseJoined__Params {
    return new PromiseJoined__Params(this);
  }
}

export class PromiseJoined__Params {
  _event: PromiseJoined;

  constructor(event: PromiseJoined) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get joiner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PromisePaid extends ethereum.Event {
  get params(): PromisePaid__Params {
    return new PromisePaid__Params(this);
  }
}

export class PromisePaid__Params {
  _event: PromisePaid;

  constructor(event: PromisePaid) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PromisePendingAmountClosed extends ethereum.Event {
  get params(): PromisePendingAmountClosed__Params {
    return new PromisePendingAmountClosed__Params(this);
  }
}

export class PromisePendingAmountClosed__Params {
  _event: PromisePendingAmountClosed;

  constructor(event: PromisePendingAmountClosed) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get executor(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get refund(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class PromiseCore__joinersResult {
  value0: BigInt;
  value1: BigInt;
  value2: boolean;

  constructor(value0: BigInt, value1: BigInt, value2: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    return map;
  }
}

export class PromiseCore__listResult {
  value0: Bytes;
  value1: BigInt;
  value2: Bytes;

  constructor(value0: Bytes, value1: BigInt, value2: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromFixedBytes(this.value2));
    return map;
  }
}

export class PromiseCore__promisesResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: boolean;
  value5: Address;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: boolean,
    value5: Address,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    return map;
  }
}

export class PromiseCore extends ethereum.SmartContract {
  static bind(address: Address): PromiseCore {
    return new PromiseCore("PromiseCore", address);
  }

  feeAddress(): Address {
    let result = super.call("feeAddress", "feeAddress():(address)", []);

    return result[0].toAddress();
  }

  try_feeAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeAddress", "feeAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feeBP(): BigInt {
    let result = super.call("feeBP", "feeBP():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feeBP(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("feeBP", "feeBP():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  joiners(param0: BigInt, param1: Bytes): PromiseCore__joinersResult {
    let result = super.call(
      "joiners",
      "joiners(uint256,bytes32):(uint256,uint256,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );

    return new PromiseCore__joinersResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBoolean()
    );
  }

  try_joiners(
    param0: BigInt,
    param1: Bytes
  ): ethereum.CallResult<PromiseCore__joinersResult> {
    let result = super.tryCall(
      "joiners",
      "joiners(uint256,bytes32):(uint256,uint256,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromFixedBytes(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PromiseCore__joinersResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBoolean()
      )
    );
  }

  joinersLength(param0: BigInt): BigInt {
    let result = super.call(
      "joinersLength",
      "joinersLength(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_joinersLength(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "joinersLength",
      "joinersLength(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastId(): BigInt {
    let result = super.call("lastId", "lastId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastId", "lastId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  length(param0: Bytes): BigInt {
    let result = super.call("length", "length(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBigInt();
  }

  try_length(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall("length", "length(bytes32):(uint256)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  list(param0: Bytes): PromiseCore__listResult {
    let result = super.call("list", "list(bytes32):(bytes32,uint256,bytes32)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return new PromiseCore__listResult(
      result[0].toBytes(),
      result[1].toBigInt(),
      result[2].toBytes()
    );
  }

  try_list(param0: Bytes): ethereum.CallResult<PromiseCore__listResult> {
    let result = super.tryCall(
      "list",
      "list(bytes32):(bytes32,uint256,bytes32)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PromiseCore__listResult(
        value[0].toBytes(),
        value[1].toBigInt(),
        value[2].toBytes()
      )
    );
  }

  promises(param0: BigInt): PromiseCore__promisesResult {
    let result = super.call(
      "promises",
      "promises(uint256):(address,address,uint112,uint256,bool,address,uint112,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new PromiseCore__promisesResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBoolean(),
      result[5].toAddress(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt()
    );
  }

  try_promises(
    param0: BigInt
  ): ethereum.CallResult<PromiseCore__promisesResult> {
    let result = super.tryCall(
      "promises",
      "promises(uint256):(address,address,uint112,uint256,bool,address,uint112,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PromiseCore__promisesResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBoolean(),
        value[5].toAddress(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt()
      )
    );
  }

  tail(param0: Bytes): Bytes {
    let result = super.call("tail", "tail(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBytes();
  }

  try_tail(param0: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("tail", "tail(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  divMul(a: BigInt, b: BigInt, c: BigInt): BigInt {
    let result = super.call(
      "divMul",
      "divMul(uint112,uint112,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(a),
        ethereum.Value.fromUnsignedBigInt(b),
        ethereum.Value.fromUnsignedBigInt(c)
      ]
    );

    return result[0].toBigInt();
  }

  try_divMul(a: BigInt, b: BigInt, c: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "divMul",
      "divMul(uint112,uint112,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(a),
        ethereum.Value.fromUnsignedBigInt(b),
        ethereum.Value.fromUnsignedBigInt(c)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _feeAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreatePromiseCall extends ethereum.Call {
  get inputs(): CreatePromiseCall__Inputs {
    return new CreatePromiseCall__Inputs(this);
  }

  get outputs(): CreatePromiseCall__Outputs {
    return new CreatePromiseCall__Outputs(this);
  }
}

export class CreatePromiseCall__Inputs {
  _call: CreatePromiseCall;

  constructor(call: CreatePromiseCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get creatorToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get creatorAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get joinerToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get joinerAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get expirationTimestamp(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class CreatePromiseCall__Outputs {
  _call: CreatePromiseCall;

  constructor(call: CreatePromiseCall) {
    this._call = call;
  }
}

export class JoinPromiseCall extends ethereum.Call {
  get inputs(): JoinPromiseCall__Inputs {
    return new JoinPromiseCall__Inputs(this);
  }

  get outputs(): JoinPromiseCall__Outputs {
    return new JoinPromiseCall__Outputs(this);
  }
}

export class JoinPromiseCall__Inputs {
  _call: JoinPromiseCall;

  constructor(call: JoinPromiseCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class JoinPromiseCall__Outputs {
  _call: JoinPromiseCall;

  constructor(call: JoinPromiseCall) {
    this._call = call;
  }
}

export class PayPromiseCall extends ethereum.Call {
  get inputs(): PayPromiseCall__Inputs {
    return new PayPromiseCall__Inputs(this);
  }

  get outputs(): PayPromiseCall__Outputs {
    return new PayPromiseCall__Outputs(this);
  }
}

export class PayPromiseCall__Inputs {
  _call: PayPromiseCall;

  constructor(call: PayPromiseCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class PayPromiseCall__Outputs {
  _call: PayPromiseCall;

  constructor(call: PayPromiseCall) {
    this._call = call;
  }
}

export class ClosePendingPromiseAmountCall extends ethereum.Call {
  get inputs(): ClosePendingPromiseAmountCall__Inputs {
    return new ClosePendingPromiseAmountCall__Inputs(this);
  }

  get outputs(): ClosePendingPromiseAmountCall__Outputs {
    return new ClosePendingPromiseAmountCall__Outputs(this);
  }
}

export class ClosePendingPromiseAmountCall__Inputs {
  _call: ClosePendingPromiseAmountCall;

  constructor(call: ClosePendingPromiseAmountCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClosePendingPromiseAmountCall__Outputs {
  _call: ClosePendingPromiseAmountCall;

  constructor(call: ClosePendingPromiseAmountCall) {
    this._call = call;
  }
}

export class ExecutePromiseCall extends ethereum.Call {
  get inputs(): ExecutePromiseCall__Inputs {
    return new ExecutePromiseCall__Inputs(this);
  }

  get outputs(): ExecutePromiseCall__Outputs {
    return new ExecutePromiseCall__Outputs(this);
  }
}

export class ExecutePromiseCall__Inputs {
  _call: ExecutePromiseCall;

  constructor(call: ExecutePromiseCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ExecutePromiseCall__Outputs {
  _call: ExecutePromiseCall;

  constructor(call: ExecutePromiseCall) {
    this._call = call;
  }
}
