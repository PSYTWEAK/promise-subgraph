// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class JoinablePromise extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save JoinablePromise entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save JoinablePromise entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("JoinablePromise", id.toString(), this);
  }

  static load(id: string): JoinablePromise | null {
    return store.get("JoinablePromise", id) as JoinablePromise | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get creatorToken(): Bytes {
    let value = this.get("creatorToken");
    return value.toBytes();
  }

  set creatorToken(value: Bytes) {
    this.set("creatorToken", Value.fromBytes(value));
  }

  get joinerToken(): Bytes {
    let value = this.get("joinerToken");
    return value.toBytes();
  }

  set joinerToken(value: Bytes) {
    this.set("joinerToken", Value.fromBytes(value));
  }

  get creatorTokenPriceInJoinerToken(): BigDecimal {
    let value = this.get("creatorTokenPriceInJoinerToken");
    return value.toBigDecimal();
  }

  set creatorTokenPriceInJoinerToken(value: BigDecimal) {
    this.set("creatorTokenPriceInJoinerToken", Value.fromBigDecimal(value));
  }

  get remainingPositionSize(): BigInt {
    let value = this.get("remainingPositionSize");
    return value.toBigInt();
  }

  set remainingPositionSize(value: BigInt) {
    this.set("remainingPositionSize", Value.fromBigInt(value));
  }

  get creatorDebt(): BigInt {
    let value = this.get("creatorDebt");
    return value.toBigInt();
  }

  set creatorDebt(value: BigInt) {
    this.set("creatorDebt", Value.fromBigInt(value));
  }

  get joinerDebt(): BigInt | null {
    let value = this.get("joinerDebt");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set joinerDebt(value: BigInt | null) {
    if (value === null) {
      this.unset("joinerDebt");
    } else {
      this.set("joinerDebt", Value.fromBigInt(value as BigInt));
    }
  }

  get numOfJoiners(): BigInt | null {
    let value = this.get("numOfJoiners");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numOfJoiners(value: BigInt | null) {
    if (value === null) {
      this.unset("numOfJoiners");
    } else {
      this.set("numOfJoiners", Value.fromBigInt(value as BigInt));
    }
  }

  get expirationTimestamp(): BigInt {
    let value = this.get("expirationTimestamp");
    return value.toBigInt();
  }

  set expirationTimestamp(value: BigInt) {
    this.set("expirationTimestamp", Value.fromBigInt(value));
  }
}

export class Pair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Pair entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Pair entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Pair", id.toString(), this);
  }

  static load(id: string): Pair | null {
    return store.get("Pair", id) as Pair | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalLiquidityCreatorToken(): BigInt | null {
    let value = this.get("totalLiquidityCreatorToken");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalLiquidityCreatorToken(value: BigInt | null) {
    if (value === null) {
      this.unset("totalLiquidityCreatorToken");
    } else {
      this.set("totalLiquidityCreatorToken", Value.fromBigInt(value as BigInt));
    }
  }

  get totalLiquidityJoinerToken(): BigInt | null {
    let value = this.get("totalLiquidityJoinerToken");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalLiquidityJoinerToken(value: BigInt | null) {
    if (value === null) {
      this.unset("totalLiquidityJoinerToken");
    } else {
      this.set("totalLiquidityJoinerToken", Value.fromBigInt(value as BigInt));
    }
  }
}
